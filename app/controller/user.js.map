{
    "version": 3,
    "sources": [
        "../../src/controller/user.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "indexAction",
        "loginAction",
        "username",
        "post",
        "password",
        "user",
        "model",
        "userInfo",
        "where",
        "find",
        "think",
        "isEmpty",
        "fail",
        "result",
        "verifyPassword",
        "encrypt",
        "last_login_time",
        "formatDate",
        "update",
        "success",
        "msg",
        "update_psdAction",
        "data",
        "newPsd",
        "confirmPsd",
        "oldPsd",
        "signPassword",
        "Object",
        "assign",
        "update_time",
        "rows",
        "update_mesAction"
    ],
    "mappings": "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",
    "file": "../../src/controller/user.js",
    "sourcesContent": [
        "/**\n * 用户登录，更新密码，更新个人信息接口\n */\n\nconst Base = require('./base.js');\n\nmodule.exports = class extends Base {\n  async indexAction() {\n  }\n  /* 登录接口 */\n  async loginAction() {\n    // 获取请求参数 - 用户名\n    const username = this.post('username')\n    // 获取请求参数 - 密码\n    const password = this.post('password')\n    const user = this.model('user')\n    // 查询用户数据\n    const userInfo = await user.where({username: username}).find()\n    // 用户不存在 - 返回\n    if (think.isEmpty(userInfo)) {\n      return this.fail('用户不存在')\n    }\n    // 用户存在 - 比对密码 - 密码错误\n    const result = user.verifyPassword(userInfo, password)\n    if (think.isEmpty(result)) {\n        return this.fail('密码错误')\n    }\n    // 删除密码和密码校验参数\n    delete userInfo.password\n    delete userInfo.encrypt\n    // 更新登录时间\n    userInfo.last_login_time = this.formatDate()\n    user.where({ username: username }).update(userInfo)\n    // 返回成功数据\n    return this.success({\n      msg: '登录成功',\n      userInfo: userInfo\n    })\n  }\n  /* 更新密码接口 */\n  async update_psdAction() {\n    const data = this.post()\n    if (think.isEmpty(data)) {\n      return this.fail('数据不能为空')\n    }\n    if(data.newPsd !== data.confirmPsd) {\n      return this.fail('两次密码输入不一致')\n    }\n    const user = this.model('user')\n    let userInfo = await user.where({username: data.username}).find()\n    if (!user.verifyPassword(userInfo, data.oldPsd)) {\n      return this.fail('当前密码输入错误')\n    }\n    userInfo.password = user.signPassword(userInfo, data.newPsd)\n    userInfo = Object.assign(userInfo, {update_time: this.formatDate()})\n    const rows = await user.where({username: data.username}).update(userInfo)\n    if (!rows) {\n      return this.fail('更新失败')\n    }\n    return this.success('更新成功')\n  }\n  /* 更新个人信息接口 */\n  async update_mesAction() {\n    const data = this.post()\n    if (think.isEmpty(data)) {\n      return this.fail('数据不能为空')\n    }\n    const user = this.model('user')\n    let userInfo = await user.where({username: data.username}).find()\n    if (think.isEmpty(userInfo)) {\n      return this.fail('请勿随便更改用户信息')\n    }\n    data.update_time = this.formatDate()\n    const rows = await user.where({username: data.username}).update(data)\n    if (!rows) {\n      return this.fail('更新失败')\n    }\n    return this.success({\n      msg: '更新成功',\n      userInfo: data\n    })\n  }\n};\n"
    ]
}